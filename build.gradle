plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id("io.github.juuxel.loom-quiltflower-mini") version "1.1.0"
    id "com.modrinth.minotaur" version "1.2.1"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
import com.modrinth.minotaur.TaskModrinthUpload

apply plugin: 'fabric-loom'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

sourceSets {
    testmod {
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.compileClasspath
    }
}

loom {
    runs {
        testmodClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Test Mod Client"
            source sourceSets.testmod
        }
        testmodServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Test Mod Server"
            source sourceSets.testmod
        }
    }

    accessWidenerPath = file("src/main/resources/polymer.accesswidener")
}


allprojects {
    apply plugin: 'fabric-loom'

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.

        maven { url "https://jitpack.io" }
        maven { url = "https://maven.nucleoid.xyz/" }
        maven { url = "https://maven.gegy.dev/" }
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://maven.bai.lol" }
        maven { url = "https://maven.ryanliptak.com/" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

        mavenLocal()
    }

    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    }

    tasks.withType(JavaCompile).configureEach {
        // ensure that the encoding is set to UTF-8, no matter what the system default is
        // this fixes some edge cases with special characters not displaying correctly
        // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
        // If Javadoc is generated, this must be specified in that task too.
        it.options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.

        it.options.release = 17
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

dependencies {

    // Fabric API. This is technically optional, but you probably want it anyway.
    modRuntimeOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modCompileOnly "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //modRuntime "supercoder79:databreaker:0.2.7"

    modCompileOnly 'com.github.CaffeineMC:lithium-fabric:dace2004'

    modCompileOnly 'com.github.TheEpicBlock:PolyMc:3.3.1'

    modCompileOnly "mcp.mobius.waila:wthit:fabric-3.10.1"

    //modRuntime 'com.github.TheEpicBlock:PolyMc:3.3.1'

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:7.1.356"

    modCompileOnly("squeek.appleskin:appleskin-fabric:mc1.17.1-2.2.0:api") {
        exclude(group: "com.terraformersmc")
        exclude(group: "io.github.prospector")
        exclude(group: "io.github.prospector")
        exclude(group: "net.fabricmc")
    }

    modImplementation include("xyz.nucleoid:packet-tweaker:0.2.0+1.18-pre1")
    modCompileOnly "me.lucko:fabric-permissions-api:0.1-SNAPSHOT"

    modRuntime "fr.catcore:server-translations-api:1.4.8+1.18-pre1"
    modCompileOnly "fr.catcore:server-translations-api:1.4.8+1.18-pre1"

    //modRuntimeOnly "com.github.arthurbambou:Server-Translations:1.18-SNAPSHOT"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    runtimeOnly project(":polymer-legacy")
    include project(":polymer-legacy")

    testmodImplementation sourceSets.main.output
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

void setupRepositories(RepositoryHandler repositories) {
    def env = System.getenv()

    if (env.MAVEN_URL) {
        repositories.maven {
            credentials {
                username env.MAVEN_USERNAME
                password env.MAVEN_PASSWORD
            }
            url env.MAVEN_URL
        }
    } else {
        repositories.mavenLocal()
    }
}

// configure the maven publication

curseforge {
    if (System.getenv("CURSEFORGE")) {
        apiKey = System.getenv("CURSEFORGE")

        project {
            id = "551890"
            releaseType = "release"
            changelog = ""
            changelogType = "markdown"
            addGameVersion "1.18.1"
            addGameVersion "Fabric"
            mainArtifact(remapJar)

            afterEvaluate {
                uploadTask.dependsOn("remapJar")
            }
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

task publishModrinth (type: TaskModrinthUpload) {
    onlyIf {
        System.getenv("MODRINTH") // Only attempt to run this task if the MODRINTH variable is set, otherwise SKIP it
    }

    token = System.getenv("MODRINTH")
    projectId = 'xGdtZczs'// The ID of your modrinth project, slugs will not work.
    versionNumber = "" + version // The version of the mod to upload.
    uploadFile = remapJar // This links to a task that builds your mod jar and sets "uploadFile" to the mod jar.
    addGameVersion('1.18.1') // Any minecraft version.
    addLoader('fabric') // Can be fabric or forge. Modrinth will support liteloader and rift at a later date.
}

remapJar {
    finalizedBy publishModrinth
    finalizedBy project.tasks.curseforge
}

publishModrinth.mustRunAfter remapJar
project.tasks.curseforge.mustRunAfter remapJar

allprojects {
    apply plugin: 'maven-publish'
    afterEvaluate {
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = rootProject.maven_group
                    artifactId = project.archivesBaseName
                    version = project.version

                    from components.java
                }

            }

            setupRepositories(repositories)
        }
    }
}

